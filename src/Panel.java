/* Nick Miller */

import java.awt.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.Map;

/**
 * @author millernb2022
 */
public class Panel extends javax.swing.JFrame {
    private DFA dfa;
    /**
     * Creates new form Panel
     */
    public Panel() {
        initComponents();

        dfaDefinitionTextField.setText("https://klayder.com/UMU/450/2020fall/projects/DFA_multi_input_Data/dfa04.txt" +
                "" +
                "" +
                "" +
                "" +
                "" +
                "" +
                "" +
                "");
        dfaInputTextField.setText("https://klayder.com/UMU/450/2020fall/projects/DFA_multi_input_Data/inputBinary_dfa04_test.txt");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dfaDefinitionTextField = new javax.swing.JTextField();
        dfaInputTextField = new javax.swing.JTextField();
        ShowDfaDefinition = new javax.swing.JButton();
        definitionLabel = new javax.swing.JLabel();
        inputLabel = new javax.swing.JLabel();
        ShowDfaDefinition1 = new javax.swing.JButton();
        readAndValidateDFA = new javax.swing.JButton();
        processInputStringsUsingDfa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dfaDefinitionTextField.setText("url");

        dfaInputTextField.setText("url");

        ShowDfaDefinition.setText("Show");
        ShowDfaDefinition.addActionListener(this::ShowDfaDefinitionActionPerformed);

        definitionLabel.setText("dfa definition");

        inputLabel.setText("dfa input");

        ShowDfaDefinition1.setText("Show");
        ShowDfaDefinition1.addActionListener(this::ShowDfaInputActionPerformed);

        readAndValidateDFA.setText("read and validate DFA and input strings");
        readAndValidateDFA.addActionListener(this::readAndValidateDFAActionPerformed);

        processInputStringsUsingDfa.setText("process input strings using DFA");
        processInputStringsUsingDfa.addActionListener(this::processInputStringsUsingDfaActionPerformed);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                         .addGroup(layout.createSequentialGroup()
                                                                .addGap(32, 32, 32)
                                                                 .addComponent(definitionLabel)
                                                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(ShowDfaDefinition, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(32, 32, 32)
                                                                .addComponent(inputLabel)
                                                                .addGap(32, 32, 32)
                                                                .addComponent(ShowDfaDefinition1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 309, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(readAndValidateDFA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(processInputStringsUsingDfa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(dfaDefinitionTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(dfaInputTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jScrollPane1))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ShowDfaDefinition)
                                        .addComponent(definitionLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dfaDefinitionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ShowDfaDefinition1)
                                        .addComponent(inputLabel))
                                .addGap(18, 18, 18)
                                .addComponent(dfaInputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(readAndValidateDFA)
                                .addGap(34, 34, 34)
                                .addComponent(processInputStringsUsingDfa)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ShowDfaDefinitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowDfaDefinitionActionPerformed
        System.out.println("showDfaDefinitionActionPerformed");
        textArea.setText("DFA Definition:\n\n");

        String[] data = simpleReadData(dfaDefinitionTextField.getText());
        if (data != null) {
            textArea.append(String.join("\n", data));
        }
    }//GEN-LAST:event_ShowDfaDefinitionActionPerformed

    private void ShowDfaInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowDfaDefinition1ActionPerformed
        System.out.println("showDfaInputActionPerformed");
        textArea.setText("DFA Input:\n\n");

        String[] data = simpleReadData(dfaInputTextField.getText());
        if (data != null) {
            textArea.append(String.join("\n", data));
        }
    }//GEN-LAST:event_ShowDfaDefinition1ActionPerformed

    private void readAndValidateDFAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readAndValidateDFAActionPerformed
        try {
            dfa = new DFA(dfaDefinitionTextField.getText());
        } catch (DFA.InvalidDFADefinition e) {
            dfa = null;
            textArea.setText(String.format("Invalid DFA:\n\n%s", e.getMessage()));
            return;
        }
        textArea.setText("Valid DFA!");

    }//GEN-LAST:event_readAndValidateDFAActionPerformed

    private void processInputStringsUsingDfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processInputStringsUsingDfaActionPerformed
        readAndValidateDFAActionPerformed(evt);
        // Invalid dfa, ignore button click.
        if (dfa == null) {
            return;
        }

        textArea.setText(String.format("set of states:  %s\n", String.join(" ", dfa.getStates())));
        textArea.append(String.format("set of input symbols:  %s\n", String.join(" ", dfa.getInputAlphabet())));
        textArea.append(String.format("start state: %s\n", dfa.getInitialState()));
        textArea.append(String.format("set of final states:  %s\n", String.join(" ", dfa.getFavorableStates())));
        textArea.append("delta:\n");
        textArea.append(String.format("      %s\n", String.join("   ", dfa.getInputAlphabet())));
        textArea.append(String.format("    %s\n", "-".repeat(4 * dfa.getInputAlphabet().length)));
        for (Map.Entry<String, Map<String, String>> entry : dfa.getDeltaFunctionTransitions().entrySet()) {
            String[] outputs = new String[dfa.getInputAlphabet().length];
            for (int i = 0; i < dfa.getInputAlphabet().length; i++) {
                outputs[i] = entry.getValue().get(dfa.getInputAlphabet()[i]);
            }
            textArea.append(String.format("%s |   %s\n", entry.getKey(), String.join("   ", outputs)));
        }
        textArea.append("\n\n");

        String[] inputs = DFA.simpleReadData(dfaInputTextField.getText());
        if(inputs == null) {
            return;
        }
        for (String input : inputs) {
            textArea.append(String.format("%s   is%s accepted\n", input, dfa.isAccepted(input) ? "" : " NOT"));
        }
    }//GEN-LAST:event_processInputStringsUsingDfaActionPerformed

    public static String[] simpleReadData(String urlName) {
        String[] info = null;

        try {
            URL url = new URL(urlName);
            In fileInput = new In(url);

            if (fileInput.exists()) {
                System.out.println("fileInput.exists()   ");
                String inputData = fileInput.readAll();
                info = inputData.split("\n");
            } else {
                System.out.println("   NOT   fileInput.exists()   ");
                System.out.println("could not find url:  " + urlName + "\n\n");
            }
        } catch (MalformedURLException ex) {
            System.out.println("error trying to read URL:\n  " + urlName);
        }
        return info;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Panel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ShowDfaDefinition;
    private javax.swing.JButton ShowDfaDefinition1;
    private javax.swing.JTextArea textArea;
    private javax.swing.JLabel definitionLabel;
    private javax.swing.JTextField dfaDefinitionTextField;
    private javax.swing.JTextField dfaInputTextField;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processInputStringsUsingDfa;
    private javax.swing.JButton readAndValidateDFA;
    // End of variables declaration//GEN-END:variables
}
